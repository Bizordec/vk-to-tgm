[tool.poetry]
package-mode = false
name = "env-helper"
version = "1.2.0"
description = "Service that helps to set environment variables in .env file"
authors = ["Ilia Boyazitov"]
license = "GPL-3.0-or-later"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
rich = "^13.9.4"
telethon = "^1.38.1"
vkaudiotoken = {git = "https://github.com/Bizordec/vkaudiotoken-python.git"}
vkbottle = "^4.4.3"
aiohttp = "^3.11.7"
pydantic = "^2.10.1"
pydantic-settings = "^2.6.1"
python-dotenv = "^1.0.1"
loguru = "^0.7.2"
uvloop = "^0.19.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
ruff = "^0.8.0"
mypy = "^1.13.0"
commitizen = "^3.31.0"
pytest-socket = "^0.7.0"
pytest-mock = "^3.14.0"
aioresponses = "^0.7.7"


[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
plugins = [
    "pydantic.mypy"
]
strict = true

[tool.ruff]
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100",     # pydocstyle: undocumented-public-module
    "D101",     # pydocstyle: undocumented-public-class
    "D102",     # pydocstyle: undocumented-public-method
    "D103",     # pydocstyle: undocumented-public-function
    "D104",     # pydocstyle: undocumented-public-package
    "D105",     # pydocstyle: undocumented-magic-method
    "D106",     # pydocstyle: undocumented-public-nested-class
    "D107",     # pydocstyle: undocumented-public-init
    "D203",     # pydocstyle: one-blank-line-before-class
    "D213",     # pydocstyle: multi-line-summary-second-line
    "ANN002",   # flake8-annotations: missing-type-args
    "ANN003",   # flake8-annotations: missing-type-kwargs
    "FBT001",   # flake8-boolean-trap: boolean-type-hint-positional-argument
    "DJ",       # flake8-django
    "EM",       # flake8-errmsg
    "TD002",    # flake8-todos: missing-todo-author
    "TD003",    # flake8-todos: missing-todo-link
    "FIX",      # flake8-fixme
    "PD",       # pandas-vet
    "PLE1205",  # pylint: logging-too-many-args
    "PLR0911",  # pylint: too-many-return-statements
    "PLR0913",  # pylint: too-many-arguments
    "TRY003",   # tryceratops: raise-vanilla-args
    "NPY",      # numpy
    "AIR",      # airflow
    "RUF001",   # ruff: ambiguous-unicode-character-string
    "RUF002",   # ruff: ambiguous-unicode-character-docstring
    "RUF003",   # ruff: ambiguous-unicode-character-comment
]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = [
    "S101",     # flake8-bandit: assert
    "SLF001",   # flake8-self: private-member-access
    "PLR2004"   # pylint: magic-value-comparison
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.pytest.ini_options]
addopts = [
    "--disable-socket",
    "--allow-unix-socket"
]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    'if __name__ == "__main__":'
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
